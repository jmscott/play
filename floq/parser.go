// Code generated by goyacc -o parser.go parser.y. DO NOT EDIT.

//line parser.y:9
package main

import __yyfmt__ "fmt"

//line parser.y:9

import (
	"bufio"
	"errors"
	"fmt"
	"io"
	"os"
	"strconv"
	"unicode"
)

const max_name_rune_count = 127

func init() {

	//  sanity test for mapping yy tokens to name
	if yyToknames[3] != "__MIN_YYTOK" {
		panic("yyToknames[3] != __MIN_YYTOK: correct yacc command?")
	}

	//yyDebug = 4
}

//line parser.y:34
type yySymType struct {
	yys  int
	ast  *ast
	name string
	string
	uint64
	int
}

const __MIN_YYTOK = 57346
const PARSE_ERROR = 57347
const ARG = 57348
const ARG_LIST = 57349
const ATT = 57350
const ATT_TUPLE = 57351
const ATT_ARRAY = 57352
const RUN = 57353
const COMMAND = 57354
const COMMAND_REF = 57355
const CREATE = 57356
const EXPAND_ENV = 57357
const FLOW = 57358
const STMT_LIST = 57359
const STMT = 57360
const NAME = 57361
const UINT64 = 57362
const STRING = 57363
const OF = 57364
const LINES = 57365
const SCANNER = 57366
const SCANNER_REF = 57367
const TRACER = 57368
const TRACER_REF = 57369
const yy_TRUE = 57370
const yy_FALSE = 57371
const yy_AND = 57372
const yy_OR = 57373
const NOT = 57374
const EQ = 57375
const NEQ = 57376
const GT = 57377
const GTE = 57378
const LT = 57379
const LTE = 57380
const MATCH = 57381
const NOMATCH = 57382
const CONCAT = 57383
const WHEN = 57384
const ADD = 57385
const SUB = 57386
const MUL = 57387
const DIV = 57388

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"__MIN_YYTOK",
	"PARSE_ERROR",
	"ARG",
	"ARG_LIST",
	"ATT",
	"ATT_TUPLE",
	"ATT_ARRAY",
	"RUN",
	"COMMAND",
	"COMMAND_REF",
	"CREATE",
	"EXPAND_ENV",
	"FLOW",
	"STMT_LIST",
	"STMT",
	"NAME",
	"UINT64",
	"STRING",
	"OF",
	"LINES",
	"SCANNER",
	"SCANNER_REF",
	"TRACER",
	"TRACER_REF",
	"yy_TRUE",
	"yy_FALSE",
	"yy_AND",
	"yy_OR",
	"NOT",
	"EQ",
	"NEQ",
	"GT",
	"GTE",
	"LT",
	"LTE",
	"MATCH",
	"NOMATCH",
	"CONCAT",
	"WHEN",
	"ADD",
	"SUB",
	"MUL",
	"DIV",
	"'('",
	"')'",
	"','",
	"'['",
	"']'",
	"':'",
	"'{'",
	"'}'",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.y:751

var keyword = map[string]int{
	"and":       yy_AND,
	"Command":   COMMAND,
	"create":    CREATE,
	"ExpandEnv": EXPAND_ENV,
	"false":     yy_FALSE,
	"lines":     LINES,
	"not":       NOT,
	"of":        OF,
	"or":        yy_OR,
	"run":       RUN,
	"Scanner":   SCANNER,
	"Tracer":    TRACER,
	"true":      yy_TRUE,
	"when":      WHEN,
}

type yyLexState struct {
	in      io.RuneReader //  source stream
	line_no int           //  lexical line number
	eof     bool          //  seen eof in token stream
	peek    rune          //  lookahead in lexer
	err     error

	ast_root *ast
	name     string
	string
	uint64

	name2ast     map[string]*ast
	run_cmd2ast  map[*command]*ast
	name_is_name bool
}

func (lex *yyLexState) pushback(c rune) {

	if lex.peek != 0 {
		panic("pushback(): push before peek") /* impossible */
	}
	lex.peek = c
	if c == '\n' {
		lex.line_no--
	}
}

/*
 *  Read next UTF8 rune.
 */
func (lex *yyLexState) get() (c rune, eof bool, err error) {

	if lex.eof {
		return 0, true, nil
	}
	if lex.peek != 0 { /* returned stashed char */
		c = lex.peek
		/*
		 *  Only pushback 1 char.
		 */
		lex.peek = 0
		if c == '\n' {
			lex.line_no++
		}
		return c, false, nil
	}
	c, _, err = lex.in.ReadRune()
	if err != nil {
		if err == io.EOF {
			lex.eof = true
			return 0, true, nil
		}
		return 0, false, err
	}

	if c == unicode.ReplacementChar {
		return 0, false, lex.mkerror("get: invalid unicode sequence")
	}
	if c == '\n' {
		lex.line_no++
	}
	return c, false, nil
}

//  Note: end of file ignored!!

func (lex *yyLexState) lookahead(peek rune, ifyes int, ifno int) (int, error) {

	next, eof, err := lex.get()
	if err != nil {
		return 0, err
	}
	if next == peek {
		return ifyes, err
	}
	if !eof {
		lex.pushback(next)
	}
	return ifno, nil
}

/*
 *  Skip '#' comment.
 *  The scan stops on the terminating newline or error
 */
func skip_comment(lex *yyLexState) (err error) {
	var c rune
	var eof bool

	/*
	 *  Scan for newline, end of file, or error.
	 */
	for c, eof, err = lex.get(); !eof && err == nil; c, eof, err = lex.get() {
		if c == '\n' {
			return
		}
	}
	return err

}

// skip over whitespace in code, complicated by # coments.

func skip_space(lex *yyLexState) (c rune, eof bool, err error) {

	for c, eof, err = lex.get(); !eof && err == nil; c, eof, err = lex.get() {
		if unicode.IsSpace(c) {
			continue
		}
		if c != '#' {
			return c, false, nil
		}

		/*
		 *  Skipping over # comment terminated by newline or EOF
		 */
		err = skip_comment(lex)
		if err != nil {
			return 0, false, err
		}
	}
	return 0, eof, err
}

/*
 *  Very simple utf8 string scanning, with no proper escapes for characters.
 *  Expect this module to be replaced with correct text.Scanner.
 */
func (lex *yyLexState) scanner_string(yylval *yySymType) (eof bool, err error) {
	var c rune
	s := ""

	for c, eof, err = lex.get(); !eof && err == nil; c, eof, err = lex.get() {
		if c == '"' {
			yylval.string = s
			return false, nil
		}
		switch c {
		case '\n':
			return false, lex.mkerror("new line in string")
		case '\r':
			return false, lex.mkerror("carriage return in string")
		case '\t':
			return false, lex.mkerror("tab in string")
		case '\\':
			return false, lex.mkerror("backslash in string")
		}
		s += string(c)
	}
	if err != nil {
		return false, err
	}
	return true, nil
}

/*
 *  Scan an almost raw `...`  string as defined in golang.
 *  Carriage return is stripped.
 */
func (lex *yyLexState) scanner_raw_string(yylval *yySymType) (eof bool, err error) {
	var c rune
	s := ""

	/*
	 *  Scan a raw string of unicode letters, accepting all but `
	 */
	for c, eof, err = lex.get(); !eof && err == nil; c, eof, err = lex.get() {

		switch c {
		case '\r':
			//  why does go skip carriage return?  raw is not so raw
			continue
		case '`':
			yylval.string = s
			return false, nil
		}
		s += string(c)
	}
	if err != nil {
		return false, err
	}
	return true, nil
}

/*
 *  Scan a word consisting of a sequence of unicode Letters, Numbers and '_'
 *  characters.
 */
func (lex *yyLexState) scanner_word(
	yylval *yySymType,
	c rune,
) (tok int, err error) {
	var eof bool

	w := string(c) //  panic() if cast fails?
	count := 1

	/*
	 *  Scan a string of unicode (?) letters, numbers/digits and '_'
	 *  characters.
	 */
	for c, eof, err = lex.get(); !eof && err == nil; c, eof, err = lex.get() {
		if c > 127 ||
			(c != '_' &&
				!unicode.IsLetter(c) &&
				!unicode.IsNumber(c)) {
			break
		}
		count++
		if count > max_name_rune_count {
			return 0, lex.mkerror("word: too many chars: max=%d",
				max_name_rune_count)
		}
		w += string(c) //  Note: replace with string builder?
	}
	if err != nil {
		return 0, err
	}
	if !eof {
		lex.pushback(c) /* first character after word */
	}

	if keyword[w] > 0 { /* got a keyword */
		return keyword[w], nil /* return yacc generated token */
	}

	lex.name = w
	if lex.name_is_name == false && lex.name2ast[w] != nil {
		yylval.name = w
		return lex.name2ast[w].yy_tok, nil
	}
	return NAME, nil
}

func (lex *yyLexState) scanner_uint64(yylval *yySymType, c rune) (err error) {
	var eof bool

	ui64 := string(c)
	count := 1

	/*
	 *  Scan a string of unicode numbers/digits and let Scanf parse the
	 *  actual digit string.
	 */
	for c, eof, err = lex.get(); !eof && err == nil; c, eof, err = lex.get() {
		count++
		if count > 20 {
			return lex.mkerror("uint64 > 20 digits")
		}
		if c > 127 || !unicode.IsNumber(c) {
			break
		}
		ui64 += string(c)
	}
	if err != nil {
		return
	}
	if !eof {
		lex.pushback(c) //  first character after ui64
	}

	yylval.uint64, err = strconv.ParseUint(ui64, 10, 64)
	return
}

func (lex *yyLexState) new_rel_op(tok int, left, right *ast) (a *ast) {

	switch tok {
	case NOT:
		if left.is_bool() == false {
			lex.line_no = left.line_no
			lex.error("NOT: can not negate %s", left.name())
			return nil
		}
	case yy_AND, yy_OR:
		if left.is_bool() == false {
			lex.line_no = left.line_no
			lex.error(
				"%s: left expr not bool: got %s, want BOOL",
				yy_name(tok),
				left.name(),
			)
			return nil
		}
		if right.is_bool() == false {
			lex.line_no = right.line_no
			lex.error(
				"%s: right expr not bool: got %s, want BOOL",
				yy_name(tok),
				right.name(),
			)
			return nil
		}
	case EQ, NEQ, LT, LTE, GTE, GT:
		can_compare := (left.is_string() && right.is_string()) ||
			(left.is_uint64() && right.is_uint64()) ||
			(left.is_bool() && right.is_bool())
		if !can_compare {
			lex.line_no = right.line_no
			lex.error(
				"%s: can not compare %s and %s",
				yy_name(tok),
				left.name(),
				right.name(),
			)
			return nil
		}
	case CONCAT, MATCH, NOMATCH:
		if left.is_string() == false {
			lex.line_no = left.line_no
			lex.error("%s: left is not string", left.name())
			return nil
		}
		if right.is_string() == false {
			lex.line_no = right.line_no
			lex.error("%s: right is not string", right.name())
			return nil
		}
	default:
		msg := fmt.Sprintf(
			"new_rel_op: impossible yy token: %s",
			yy_name(tok),
		)
		panic(msg)
		return nil //  NOTREACHED
	}

	a = &ast{
		yy_tok:  tok,
		left:    left,
		right:   right,
		line_no: left.line_no, //  ought to be op line no
	}
	left.parent = a
	if right != nil {
		right.parent = a
	}
	return a
}

//  lexical scan of a token

func (lex *yyLexState) Lex(yylval *yySymType) (tok int) {

	if lex.err != nil {
		return PARSE_ERROR
	}
	if lex.eof {
		return 0
	}
	yylval.name = ""
	c, eof, err := skip_space(lex)
	if err != nil {
		goto LEX_ERROR
	}
	if eof {
		return 0
	}

	switch {

	//  ascii outside of strings, for time being (why?)
	case c > 127:
		err = lex.mkerror("char not ascii: 0x%x", c)
		goto LEX_ERROR

	case c == '=':
		//  clang "==" equality

		tok, err = lex.lookahead('=', EQ, 0)
		if err != nil {
			goto LEX_ERROR
		}
		if tok != 0 {
			return tok
		}

		//  expr regexp operator "=~"

		tok, err = lex.lookahead('~', MATCH, '=')
		if err != nil {
			goto LEX_ERROR
		}
		return tok

	case c == '!':
		//  clang inequality "!="

		tok, err = lex.lookahead('=', NEQ, 0)
		if err != nil {
			goto LEX_ERROR
		}
		if tok != 0 {
			return tok
		}

		//  expr negate match regexp operator "!~"

		tok, err = lex.lookahead('~', NOMATCH, '!')
		if err != nil {
			goto LEX_ERROR
		}
		return tok

	case c == '|':
		tok, err = lex.lookahead('|', CONCAT, '|')
		if err != nil {
			goto LEX_ERROR
		}
		return tok

	case c == '>':
		tok, err = lex.lookahead('=', GTE, GT)
		if err != nil {
			goto LEX_ERROR
		}
		return tok

	case c == '<':

		tok, err = lex.lookahead('=', LTE, LT)
		if err != nil {
			goto LEX_ERROR
		}
		return tok

	case unicode.IsLetter(c) || c == '_':
		tok, err = lex.scanner_word(yylval, c)
		if err != nil {
			goto LEX_ERROR
		}
		return tok

	case unicode.IsNumber(c):
		err = lex.scanner_uint64(yylval, c)
		if err != nil {
			goto LEX_ERROR
		}
		return UINT64

	case c == '"':
		lno := lex.line_no // reset line number on error

		eof, err = lex.scanner_string(yylval)
		if err != nil {
			goto LEX_ERROR
		}
		if eof {
			lex.line_no = lno
			err = lex.mkerror("unexpected end of file in string")
			goto LEX_ERROR
		}
		return STRING

	case c == '`':
		lno := lex.line_no // reset line number on error

		eof, err = lex.scanner_raw_string(yylval)
		if err != nil {
			goto LEX_ERROR
		}
		if eof {
			lex.line_no = lno
			err = lex.mkerror("end of file in raw string")
			goto LEX_ERROR
		}
		return STRING
	}

	return int(c)

LEX_ERROR:
	lex.err = err
	return PARSE_ERROR
}

func (lex *yyLexState) mkerror(format string, args ...interface{}) error {

	return errors.New(fmt.Sprintf("%s, near line %d",
		fmt.Sprintf(format, args...),
		lex.line_no,
	))
}

func (lex *yyLexState) error(format string, args ...interface{}) {

	lex.Error(fmt.Sprintf(format, args...))
}

func (lex *yyLexState) Error(msg string) {

	if lex.err == nil { //  only report first error
		lex.err = lex.mkerror("%s", msg)
	}
}

func parse(in io.RuneReader) (*ast, error) {

	lex := &yyLexState{
		in:          in,
		line_no:     1,
		name2ast:    make(map[string]*ast),
		run_cmd2ast: make(map[*command]*ast),
		ast_root: &ast{
			yy_tok:  FLOW,
			line_no: 1,
		},
	}
	yyParse(lex)
	return lex.ast_root, lex.err
}

func yy_name(tok int) (name string) {
	//  print token name or int value of yy token
	offset := tok - __MIN_YYTOK + 3
	if tok > __MIN_YYTOK {
		name = yyToknames[offset]
	} else {
		name = fmt.Sprintf("UNKNOWN(%d)", tok)
	}
	return
}

func WTF(format string, args ...interface{}) {

	format = "WTF: " + format
	fmt.Fprintf(os.Stderr, fmt.Sprintf(format, args...)+"\n")
}

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 127

var yyAct = [...]int8{
	29, 30, 87, 19, 77, 43, 44, 10, 47, 48,
	50, 49, 45, 46, 51, 52, 53, 81, 59, 83,
	42, 35, 82, 75, 11, 35, 33, 34, 79, 80,
	33, 34, 54, 55, 36, 37, 57, 53, 36, 37,
	41, 27, 31, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 56, 88, 32, 92, 18,
	93, 43, 44, 20, 47, 48, 50, 49, 45, 46,
	51, 52, 53, 28, 35, 7, 60, 61, 8, 33,
	34, 84, 40, 39, 38, 89, 85, 36, 37, 3,
	89, 91, 9, 17, 89, 94, 47, 48, 50, 49,
	45, 46, 51, 52, 53, 16, 24, 15, 78, 12,
	14, 13, 22, 2, 4, 5, 6, 90, 23, 86,
	58, 21, 25, 26, 76, 62, 1,
}

var yyPact = [...]int16{
	64, -1000, 64, -48, -1000, -18, 81, 46, -1000, -52,
	-1000, -1000, 93, 93, 93, -1000, 19, -1000, -1000, -1000,
	10, -1000, -1000, -1000, -1000, -1000, -1000, 17, -27, 31,
	-1000, 10, 10, -1000, -1000, 34, -1000, -1000, -35, -35,
	-35, -1000, 10, 10, 10, 10, 10, 10, 10, 10,
	10, 10, 10, 10, -1000, -25, -1000, -1000, -1000, 93,
	-1000, -1000, -20, 31, 63, 63, -4, -4, -4, -4,
	-4, -4, -4, -4, -1000, -1000, -32, -1000, -33, -1000,
	10, 93, -1000, 6, 31, -1000, -1000, -1000, 59, -1000,
	9, -1000, 59, -1000, -1000,
}

var yyPgo = [...]int8{
	0, 108, 126, 125, 4, 124, 120, 119, 2, 117,
	1, 0, 116, 36, 115, 114, 89, 113, 111, 110,
	109, 84, 83, 82, 73, 63,
}

var yyR1 = [...]int8{
	0, 2, 10, 10, 10, 10, 10, 11, 11, 11,
	11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
	11, 8, 9, 9, 9, 7, 7, 4, 5, 5,
	5, 6, 12, 18, 19, 20, 1, 1, 1, 13,
	13, 21, 15, 22, 15, 23, 15, 24, 14, 16,
	16, 25, 16, 17, 17, 17, 3, 3, 3,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 2, 1, 1, 1, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 2,
	3, 1, 0, 1, 3, 1, 3, 3, 0, 1,
	3, 3, 1, 3, 1, 1, 1, 1, 1, 0,
	1, 0, 5, 0, 5, 0, 5, 0, 6, 1,
	1, 0, 4, 0, 2, 3, 0, 1, 3,
}

var yyChk = [...]int16{
	-1000, -2, -17, -16, -15, -14, -12, 11, 14, -16,
	55, 42, -20, -18, -19, 26, 24, 12, 13, 55,
	-25, -1, 19, 25, 13, -1, -1, 22, -24, -11,
	-10, 32, 47, 20, 21, 15, 28, 29, -21, -22,
	-23, 23, 47, 30, 31, 37, 38, 33, 34, 36,
	35, 39, 40, 41, -11, -11, 21, -13, -6, 53,
	-13, -13, -3, -11, -11, -11, -11, -11, -11, -11,
	-11, -11, -11, -11, -11, 48, -5, -4, -1, 48,
	49, 49, 54, 52, -11, -4, -7, -8, 50, -10,
	-9, -8, 49, 51, -8,
}

var yyDef = [...]int8{
	53, -2, 1, 0, 49, 50, 0, 0, 32, 0,
	54, 51, 0, 0, 0, 35, 0, 34, 47, 55,
	0, 41, 36, 37, 38, 43, 45, 0, 0, 52,
	7, 0, 0, 2, 3, 0, 5, 6, 39, 39,
	39, 33, 56, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 19, 0, 4, 42, 40, 28,
	44, 46, 0, 57, 8, 9, 10, 11, 12, 13,
	14, 15, 16, 17, 18, 20, 0, 29, 0, 48,
	0, 0, 31, 0, 58, 30, 27, 25, 22, 21,
	0, 23, 0, 26, 24,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	47, 48, 3, 3, 49, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 52, 55,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 50, 3, 51, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 53, 3, 54,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:85
		{
			lex := yylex.(*yyLexState)
			yyDollar[1].ast.parent = lex.ast_root
			lex.ast_root.left = yyDollar[1].ast
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:94
		{
			yyVAL.ast = &ast{
				yy_tok:  UINT64,
				uint64:  yyDollar[1].uint64,
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:103
		{
			yyVAL.ast = &ast{
				yy_tok:  STRING,
				string:  yyDollar[1].string,
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 4:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:112
		{
			yyVAL.ast = &ast{
				yy_tok:  STRING,
				string:  os.ExpandEnv(yyDollar[2].string),
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:121
		{
			yyVAL.ast = &ast{
				yy_tok:  yy_TRUE,
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:129
		{
			yyVAL.ast = &ast{
				yy_tok:  yy_FALSE,
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:141
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(yy_AND, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 9:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:150
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(yy_OR, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:159
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(LT, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 11:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:168
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(LTE, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 12:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:177
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(EQ, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 13:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:186
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(NEQ, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(GTE, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 15:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:204
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(GT, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:213
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(MATCH, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 17:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:222
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(NOMATCH, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 18:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:231
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(CONCAT, yyDollar[1].ast, yyDollar[3].ast)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:240
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = lex.new_rel_op(NOT, yyDollar[2].ast, nil)
			if yyVAL.ast == nil {
				return 0
			}
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:249
		{
			yyVAL.ast = yyDollar[2].ast
		}
	case 22:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:260
		{
			yyVAL.ast = &ast{
				yy_tok:    ATT_ARRAY,
				line_no:   yylex.(*yyLexState).line_no,
				array_ref: make([]string, 0),
			}
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:269
		{
			lex := yylex.(*yyLexState)

			if yyDollar[1].ast.yy_tok != STRING {
				lex.error("attribute array element not string")
				return 0
			}
			ar := make([]string, 1)
			ar[0] = yyDollar[1].ast.string
			yyVAL.ast = &ast{
				yy_tok:    ATT_ARRAY,
				line_no:   lex.line_no,
				array_ref: ar,
			}
		}
	case 24:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:286
		{
			lex := yylex.(*yyLexState)

			if yyDollar[3].ast.yy_tok != STRING {
				lex.error("attribute array element not string")
				return 0
			}

			ar := yyDollar[1].ast.array_ref
			ar = append(ar, yyDollar[3].ast.string)
			yyDollar[1].ast.array_ref = ar
			if len(ar) > 127 {
				lex.error("attribute array > 127 elements")
				return 0
			}
			yyVAL.ast = yyDollar[1].ast
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:309
		{
			yyVAL.ast = yyDollar[2].ast
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:316
		{
			lex := yylex.(*yyLexState)

			a := &ast{
				yy_tok:  ATT,
				line_no: lex.line_no,
			}
			a.left = &ast{
				parent:  a,
				yy_tok:  NAME,
				string:  yyDollar[1].string,
				line_no: lex.line_no,
			}

			a.right = yyDollar[3].ast
			if a.right.yy_tok == STRING {
				c := len(a.right.string)
				format := a.left.string + ": string attribute: %s"
				if c == 0 {
					lex.error(format, "is empty")
					return 0
				}
				if c > 127 {
					lex.error(format, fmt.Sprintf("%d > 127", c))
					return 0
				}
			}
			yyDollar[3].ast.parent = a

			yyVAL.ast = a
		}
	case 28:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:351
		{
			yyVAL.ast = &ast{
				yy_tok:  ATT_TUPLE,
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:359
		{
			lex := yylex.(*yyLexState)

			al := &ast{
				yy_tok:  ATT_TUPLE,
				line_no: lex.line_no,
			}
			al.left = yyDollar[1].ast
			yyDollar[1].ast.parent = al

			yyVAL.ast = al
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:373
		{
			al := yyDollar[1].ast
			a := yyDollar[3].ast
			a.parent = al

			var an *ast
			for an = al.left; an.next != nil; an = an.next {
			}
			an.next = a
			a.previous = a

			yyVAL.ast = yyDollar[1].ast
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:389
		{
			yyVAL.ast = yyDollar[2].ast
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:396
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = &ast{
				yy_tok:  CREATE,
				line_no: lex.line_no,
			}
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:407
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = &ast{
				yy_tok:  SCANNER_REF,
				line_no: lex.line_no,
				scanner_ref: &scanner{
					split: bufio.ScanLines,
				},
			}
		}
	case 34:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:421
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = &ast{
				yy_tok:      COMMAND_REF,
				line_no:     lex.line_no,
				command_ref: &command{},
			}
		}
	case 35:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:432
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = &ast{
				yy_tok:     TRACER_REF,
				line_no:    lex.line_no,
				tracer_ref: &tracer{},
			}
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:443
		{
			lex := yylex.(*yyLexState)

			yyVAL.string = lex.name
		}
	case 37:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:450
		{
			lex := yylex.(*yyLexState)

			lex.error("name exists as scanner: %s", lex.name)
			return 0
		}
	case 38:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:458
		{
			lex := yylex.(*yyLexState)

			lex.error("name exists as command: %s", lex.name)
			return 0
		}
	case 39:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:468
		{
			yyVAL.ast = &ast{
				yy_tok:  ATT_TUPLE,
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:480
		{
			//  Note:  could production "new_name" set "name_is_name"?
			yylex.(*yyLexState).name_is_name = true

		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:484
		{

			lex := yylex.(*yyLexState)

			lex.name_is_name = false
			lex.name2ast[yyDollar[3].string] = yyDollar[2].ast

			al := yyDollar[5].ast
			atra := yyDollar[2].ast
			al.parent = yyDollar[2].ast
			atra.left = al

			atra.tracer_ref.name = yyDollar[3].string
			atra.parent = yyDollar[1].ast

			yyDollar[1].ast.left = yyDollar[2].ast

			//  frisk the attibutes of tracer

			tra := atra.tracer_ref
			lex.err = al.frisk_att("tracer: " + tra.name)
			if lex.err != nil {
				return 0
			}

			yyVAL.ast = yyDollar[1].ast
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:513
		{
			//  Note:  could production "new_name" set "name_is_name"?
			yylex.(*yyLexState).name_is_name = true

		}
	case 44:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:517
		{

			lex := yylex.(*yyLexState)

			lex.name_is_name = false
			lex.name2ast[yyDollar[3].string] = yyDollar[2].ast

			al := yyDollar[5].ast
			ascan := yyDollar[2].ast
			al.parent = yyDollar[2].ast
			ascan.left = al

			ascan.scanner_ref.name = yyDollar[3].string
			ascan.parent = yyDollar[1].ast

			yyDollar[1].ast.left = yyDollar[2].ast

			//  frisk the attibutes of command

			scan := ascan.scanner_ref
			lex.err = al.frisk_att("scanner: " + scan.name)
			if lex.err != nil {
				return 0
			}

			yyVAL.ast = yyDollar[1].ast
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:546
		{
			yylex.(*yyLexState).name_is_name = true

		}
	case 46:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:549
		{
			lex := yylex.(*yyLexState)
			lex.name_is_name = false

			c := yyDollar[1].ast
			cmd := yyDollar[2].ast
			nm := yyDollar[3].string
			ctup := yyDollar[5].ast
			cref := cmd.command_ref

			cmd.parent = c
			c.left = cmd
			ctup.parent = c
			c.right = ctup

			lex.name2ast[nm] = cmd
			cref.name = nm

			lex.err = ctup.frisk_att("command: "+cref.name, "path")
			if lex.err != nil {
				return 0
			}
			yyVAL.ast = yyDollar[1].ast
		}
	case 47:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:576
		{
			lex := yylex.(*yyLexState)
			cast := lex.name2ast[lex.name]
			if cast == nil {
				panic("impossible missing command ast: " + lex.name)
			}
			cmd := cast.command_ref

			if cmd == nil {
				panic("command: impossible nil: " + lex.name)
			}

			rc := lex.run_cmd2ast[cmd]
			if rc != nil {
				lex.error("command run twice: \"%s\"", cmd.name)
				return 0
			}

			yyVAL.ast = &ast{
				yy_tok:      RUN,
				line_no:     yylex.(*yyLexState).line_no,
				command_ref: cmd,
				left:        cast,
			}
			cast.parent = yyVAL.ast
		}
	case 48:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:601
		{
			lex := yylex.(*yyLexState)
			cmd := lex.name2ast[lex.name].command_ref

			ar := yyDollar[3].ast
			ar.right = yyDollar[5].ast
			ar.right.parent = ar

			lex.run_cmd2ast[cmd] = ar
			yyVAL.ast = ar
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:616
		{
			yyVAL.ast = &ast{
				yy_tok:  STMT,
				left:    yyDollar[1].ast,
				line_no: yylex.(*yyLexState).line_no,
			}
			yyDollar[1].ast.parent = yyVAL.ast
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:626
		{
			yyVAL.ast = &ast{
				yy_tok:  STMT,
				left:    yyDollar[1].ast,
				line_no: yylex.(*yyLexState).line_no,
			}
			yyDollar[1].ast.parent = yyVAL.ast
		}
	case 51:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:635
		{
			yyVAL.ast = &ast{
				yy_tok:  WHEN,
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 52:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:640
		{
			when := yyDollar[3].ast

			yyVAL.ast = &ast{
				yy_tok:  STMT,
				left:    yyDollar[1].ast,
				right:   when,
				line_no: yylex.(*yyLexState).line_no,
			}
			yyDollar[1].ast.parent = yyVAL.ast
			when.parent = yyVAL.ast
			when.left = yyDollar[4].ast
			yyDollar[4].ast.parent = yyVAL.ast
		}
	case 53:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:658
		{
			lex := yylex.(*yyLexState)
			yyVAL.ast = &ast{
				yy_tok:  STMT_LIST,
				line_no: lex.line_no,
				parent:  lex.ast_root,
			}
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:668
		{
			lex := yylex.(*yyLexState)

			s := yyDollar[1].ast
			sl := &ast{
				yy_tok:  STMT_LIST,
				line_no: lex.line_no,
				left:    s,
				parent:  lex.ast_root,
				uint64:  1,
			}
			s.parent = s

			yyVAL.ast = sl
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:685
		{
			sl := yyDollar[1].ast
			if sl.yy_tok != STMT_LIST {
				panic(fmt.Sprintf(
					"stmt_list not STMT_LIST: %s",
					sl.name(),
				))
			}
			s := yyDollar[2].ast

			//  find end of stmt list

			s_tail := sl.left
			for ; s_tail.next != nil; s_tail = s_tail.next {
			}
			s.uint64 = s_tail.uint64 + 1
			s_tail.next = s
			s.previous = s_tail
			s.parent = sl

			sl.uint64++ //  count the # stmt

			yyVAL.ast = yyDollar[1].ast
		}
	case 56:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:712
		{
			yyVAL.ast = &ast{
				yy_tok:  ARG_LIST,
				line_no: yylex.(*yyLexState).line_no,
			}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:720
		{
			lex := yylex.(*yyLexState)

			al := &ast{
				yy_tok:  ARG_LIST,
				line_no: lex.line_no,
				uint64:  1,
			}
			al.left = yyDollar[1].ast
			yyDollar[1].ast.parent = al

			yyVAL.ast = al
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:735
		{
			al := yyDollar[1].ast
			e := yyDollar[3].ast
			e.parent = al

			//  find the tail of arg list
			var an *ast
			for an = al.left; an.next != nil; an = an.next {
			}
			an.next = e
			e.previous = an

			al.uint64++

			yyVAL.ast = yyDollar[1].ast
		}
	}
	goto yystack /* stack new state and value */
}
