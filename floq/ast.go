//  abstract syntax tree generated by yacc grammar
package main

import (
	"errors"
	"fmt"
	"strings"
)

type ast struct {

	yy_tok		int
	line_no		int

	//  children
	left		*ast
	right		*ast

	//  siblings
	previous	*ast
	next		*ast

	parent		*ast

	//  golang needs unions!

	tracer_ref	*tracer
	scanner_ref	*scanner
	command_ref	*command
	uint64
	string
	array_ref	[]string
}

func (a *ast) name() string {
	if a == nil {
		return "nil"
	}
	return yy_name(a.yy_tok)
}

func (a *ast) String() string {

	var what string

	if a == nil {
		return "nil AST"
	}

	switch a.yy_tok {
	case 0:
		a.corrupt("ast has yy_tok == 0")
	case ARG_LIST:
		what = fmt.Sprintf("ARG_LIST(argc=%d)", a.uint64)
	case SCANNER_REF:
		what = fmt.Sprintf("SCANNER_REF(%s)", a.scanner_ref.name)
	case COMMAND_REF:
		what = fmt.Sprintf("COMMAND_REF(%s)", a.command_ref.name)
	case TRACER_REF:
		what = fmt.Sprintf("TRACER_REF(%s)", a.tracer_ref.name)
	case STRING:
		what = fmt.Sprintf("STRING(%s)", a.string)
	case NAME:
		what = fmt.Sprintf("NAME(%s)", a.string)
	case UINT64:
		what = fmt.Sprintf("UINT64(%d)", a.uint64)
	case ATT_ARRAY:
		ar := a.array_ref
		what = fmt.Sprintf("ATT_ARRAY(len=%d,cap=%d)", len(ar), cap(ar))
	case yy_AND:
		what = "AND"
	case yy_OR:
		what = "OR"
	case yy_FALSE:
		what = "FALSE"
	case yy_TRUE:
		what = "TRUE"
	case STMT_LIST:
		what = fmt.Sprintf("STMT_LIST(cnt=#%d)", a.uint64)
	case STMT:
		what = fmt.Sprintf(
				"STMT(ord=#%d@lno=#%d)",
				a.uint64,
				a.line_no,
		)
	default:
		what = a.name()
	}
	return what
}

func (a *ast) walk_print(indent int, parent *ast) {

	if a == nil {
		return
	}
	if a.parent != parent {
		if a.parent == nil {
			a.corrupt("unexpected nil parent")
		} else {
			a.corrupt("unexpected parent: %s", a.parent.name())
		}
	}
	if indent == 0 {
		fmt.Println("")
	} else {
		if a.parent == nil {
			corrupt("parent ast is nil")
		}
		for i := 0;  i < indent;  i++ {
			fmt.Print("  ")
		}
	}
	fmt.Println(a.String())

	//  print kids

	a.left.walk_print(indent + 1, a)
	a.right.walk_print(indent + 1, a)

	//  print siblings

	if a.previous == nil {
		for as := a.next;  as != nil;  as = as.next {
			as.walk_print(indent, parent)
		}
	}
}

func (a *ast) print() {
	a.walk_print(0, nil)
}

func (a *ast) frisk_att2(what string, need...ast) error {

	if a.yy_tok != ATT_TUPLE {
		corrupt("start node not ATT_TUPLE")
	}

	const fmt_dup = "duplicate attribute"
	const fmt_need = "need attribute"
	const fmt_no = "unknown attribute"
	const fmt_type = "wrong type"
	const fmt_nostr = "STRING empty"

	err := func(name string, lno int, msg string) error {

		name = "node \"" + name + "\""
		near := ", near line " + fmt.Sprintf("%d", lno)
		return errors.New(msg + ": " + what + ": " + name + near)
	}

	//  map list of need ast to name for quick check

	name2need := make(map[string]*ast)
	for _, an := range need {
		name2need[an.string] = &an
	}

	seen := make(map[string]*ast)

	//  scan each ATT nodes of ATT_TUPLE

	for an := a.left;  an != nil;  an = an.next {
		if an.yy_tok != ATT {
			an.corrupt("left node not ATT")
		}
		name := an.left.string
		
		//  more than one att exists
		if seen[name] != nil {
			return err(name, seen[name].line_no, fmt_dup)
		}
		ar := an.right
		if ar == nil {
			an.corrupt("ATT has nil right")
		}

		//  is the node known?
		ann := name2need[name]
		if ann == nil {
			return err(name, an.line_no, fmt_no)	//  unkn
		}

		/*
		 * do the types match?
		 *
		 *  Note:
		 *	error message "wrong type:" is opaque.  ought to include
		 *	expected type
		 */
		if ar.yy_tok != ann.yy_tok {
			return err(name, ar.line_no, fmt_type)
		}

		//  no empty strings
		if ar.yy_tok == STRING && ar.string == "" {
			return err(name, ar.line_no, fmt_nostr)
		}
		seen[name] = ar
	}

	//  scan for required nodes in "need" twig
	for nm, an := range name2need {
		
		if an.uint64 > 0 && seen[nm] == nil {
			return err(nm, an.line_no, fmt_need)
		}
	}

	return nil
}

//  frisk ast of attributes for duplicates and missing required and
//  correct types: STRING, UINT64, ARRAY_REF
//
//  Note:
//	Currently [ arrays ] can contain mixed types.
//

func (a *ast) frisk_att(what string, need...interface{}) error {

	if a.yy_tok != ATT_TUPLE {
		corrupt("start node not ATT_TUPLE")
	}
	const fmt_dup = "duplicate attribute"
	const fmt_need = "need attribute"

	err := func(name string, lno int, msg string) error {

		name = "node \"" + name + "\""
		near := ", near line " + fmt.Sprintf("%d", lno)
		return errors.New(msg + ": " + what + ": " + name + near)
	}

	//  frisk for duplicate attributes and record right hand node of ATT

	seen := make(map[string]*ast)

	for an := a.left;  an != nil;  an = an.next {
		if an.yy_tok != ATT {
			an.corrupt("left node not ATT")
		}
		name := an.left.string
		if seen[name] != nil {
			return err(name, seen[name].line_no, fmt_dup)
		}
		if an.right == nil {
			an.corrupt("ATT has nil right")
		}
		seen[name] = an.right
	}

	//  insure required atts exist and match types

	for _, val := range need {
		name_tok := strings.Split(val.(string), ":")
		if len(name_tok) != 2 {
			a.corrupt("corrupt name:yy_tok: '%s'", val)
		}
		nm, tok_nm := name_tok[0], name_tok[1]
		if len(nm) == 0 {
			a.corrupt("name:tok: name is 0 length")
		}
		if len(tok_nm) == 1 {
			a.corrupt("name:tok: tok name is empty")
		}
		tok := yy_name2tok(tok_nm)
		if tok <= __MIN_YYTOK  {
			a.corrupt("name:tok: yy_tok is unknown: %s", tok_nm)
		}

		ar := seen[nm]
		if ar == nil {
			return err(nm, a.line_no, fmt_need)
		}
		if tok != ar.yy_tok {
			ar.corrupt("ATT: right yy_tok not %s", tok_nm)
		}
	}
	return nil
}

func (a *ast) corrupt(format string, args...interface{}) {

	msg := fmt.Sprintf(format, args...)
	corrupt("%s: node \"%s\", near line %d", msg, a.name(), a.line_no)
	//  NOTREACHED*/
}

func (at *ast) find_ATT(name string) (*ast) {

	if at.yy_tok != ATT_TUPLE {
		at.corrupt("node not ATT_TUPLE")
	}
	for a := at.left;  a != nil;  a = a.next {
		if a.parent != at {
			a.corrupt("parent not ATT_TUPLE")
		}
		if a.yy_tok != ATT {
			a.corrupt("child not ATT")
		}
		if a.left == nil {
			a.corrupt("left is nil")
		}
		if a.left.string == name {
			return a
		}
	}
	return nil
}

//  is the node a binary operator(), left and right must exit
func (a *ast) is_binary() bool {
	switch a.yy_tok {
	case yy_OR, yy_AND, LT, LTE, EQ, NEQ, GTE, GT:
		return true
	}
	return false
}

//  is the node a unary operator(), left only exists
func (a *ast) is_unary() bool {
	switch a.yy_tok {
	case NOT, WHEN:
		return true
	}
	return false
}

func (a *ast) is_flowable() bool {
	switch a.yy_tok {
	case RUN:
		return true
	}
	return false
}

//  insure type of parent ast node is in expected yy token set...

func (a *ast) frisk_parent(expect ...int) error {
	if a == nil {
		return errors.New("frisk_parent: unexpected nil node")
	}

	if a.parent == nil {
		return errors.New("frisk_parent: parent is nil")
	}
	if !a.parent.in_tok_set(expect...) {
		return errors.New("parent not in exected yy token set")
	}
	return nil
}

func (a *ast) in_tok_set(expect ...int) bool {

	for _, tok := range expect {
		if tok == a.yy_tok {
			return true
		}
	}
	return false
}

//  insure type of ast kids are in expected yy type set... and
//  point to proper nodes.

func (a *ast) frisk_kids(expect ...int) error {
	if a == nil {
		return errors.New("node is kill")
	}
	var kid_prev *ast
	for kid := a.left;  a.next != nil;  a = a.next { 
		if kid.parent != a {
			return errors.New("kid has wrong parent")
		}
		if kid_prev != nil && kid.previous != kid_prev {
			return errors.New("kid has wrong prev")
		}
		found := kid.in_tok_set(expect...)
		if !found {
			return errors.New("kid not expected yy_tok")
		}
		kid_prev = kid
	}
	return nil
}
