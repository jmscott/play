//  abstract syntax tree generated by yacc grammar
package main

import (
	"fmt"
)

type ast struct {

	yy_tok		int
	line_no		int

	//  children
	left		*ast
	right		*ast

	//  siblings
	previous	*ast
	next		*ast

	parent		*ast

	scanner_ref	*scanner
}

func (a *ast) String() string {

	var what string

	switch a.yy_tok {
	case STATEMENT:
		what = fmt.Sprintf("STATEMENT#%d", a.line_no)
	case SCANNER_REF:
		what = fmt.Sprintf("SCANNER_REF(%s)", a.scanner_ref.name)
	default:
		//  print token name or int value of yy token
		offset := a.yy_tok - __MIN_YYTOK + 3
		if (a.yy_tok > __MIN_YYTOK) {
			what = yyToknames[offset]
		} else {
			what = fmt.Sprintf( "UNKNOWN(%d)", a.yy_tok)
		}
	}
	return what
}

func (a *ast) walk_print(indent int) {

	if a == nil {
		return
	}
	if indent == 0 {
		fmt.Println("")
	} else {
		if a.parent == nil {
			panic("ast: parent is not nil")
		}
		for i := 0;  i < indent;  i++ {
			fmt.Print("  ")
		}
	}
	fmt.Println(a.String())

	//  print kids

	a.left.walk_print(indent + 1)
	a.right.walk_print(indent + 1)

	//  print siblings

	if a.previous == nil {
		for as := a.next;  as != nil;  as = as.next {
			as.walk_print(indent)
		}
	}
}

func (a *ast) print() {
	a.walk_print(0)
}
