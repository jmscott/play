#!/bin/bash
#
#  Synopsis:
#	Put JSON of elements from SEC EDGAR gtar YYYYMMDD.nc.tar.gz into json.
#  Desciption:
#	Put a JSON blob describing the file elements of an NC tar file from
#	SEC Edgar database.
#  Usage:
#	nc-tar-file2json <tar-blob>
#  Exit Status:
#	0	merged
#	1	failed
#  Note:
#	A tar with no files is a not handled properly.
#
#	Spaces in file paths will break script!
#
JOB_START_TIME=$(RFC3339Nano)
START_EPOCH=$(date +%s)

PROG=$(basename $0)
TMP_JSON=${TMPDIR:=/tmp}/$PROG.$$

now()
{
	date +'%Y/%m/%d %H:%M:%S'
}

log()
{
	echo "$(now): $@"
}

fault()
{
	test -d run/ || return
	MSG="ERROR: $@"
	log "$MSG" >&2
	MSG="$(now): $MSG"
	FAULT=run/$PROG.fault
	echo "$MSG" >>run/$PROG.fault					||
		log "ERROR: echo fault failed: exit status=$?" >&2
}

leave()
{
	rm -f $TMP_JSON || fault "rm tmp json failed: exit status=$?" >&2
	DURATION=$(duration-english $(expr $(date +%s) - $START_EPOCH))
	log "elapsed duration: $DURATION"
	log 'good bye, cruel world'
	exit
}

die()
{
	fault "$@"
	exit 1
}

log 'hello, world'
trap leave EXIT

test $# = 1 || die "wrong number of arguments: got $#, expected 1"
TAR_BLOB=$1
log "BLOBIO_SERVICE=$BLOBIO_SERVICE"
log "BLOBIO_ALGORITHM=$BLOBIO_ALGORITHM"
log "tar blob: $TAR_BLOB"
log "tar path: $(which tar)"
log "temp json job: $TMP_JSON"
log "PATH: $PATH"
log "which tar: $(which tar)"

GNUTAR_VERSION=$(tar --version | head -1)
case "$GNUTAR_VERSION" in
*GNU*|*gnu*)
	log "gnu tar version: $GNUTAR_VERSION"
	;;
*)
	die "unexpected output from gnu tar --version: $GNUTAR_VERSION"
	;;
esac
GNUTAR_VERSION=$(echo "$GNUTAR_VERSION" | escape-json-string)

cat >$TMP_JSON <<END
{
	"secedgar.play.jmscott.github.com": {
		"hostname": "$(hostname -f)",
		"process_id": "$$",
		"job_start_time": "$JOB_START_TIME",
		"gnu_tar_version": "$GNUTAR_VERSION",
		"environment": {
			"PATH": "echo $PATH | escape-json-string",
			"LD_LIBRARY_PATH": "echo $LD_LIBRARY_PATH | escape-json-string"
		},
		"command-line" : {
			"command": "$PROG",
			"zip-tar-blob": "$TAR_BLOB"
		},
		"file-elements": [
END

log 'starting extract of tar elements into json blob ...'
#  extract the tar elements and build a json blob
blobio get --udig $TAR_BLOB --service $BLOBIO_SERVICE			|
	tar tfvz -							|
	grep '^-'							|
	tr -s ' '							|
	cut -f 3,6 -d ' '						|
	while read FILE_SIZE FILE_PATH;  do
		case "$FILE_SIZE" in
		[0-9]*)
			;;
		*)
			die "tar: unknown file size: $FILE_SIZE"
			;;
		esac
		test -n "$FILE_PATH" || die 'empty file path'

		#  write json object: {"path":"<path>", "size":<size>}
		cat <<END
		 	{
				"path": "$(echo -n $FILE_PATH|escape-json-string)",
				"size": $FILE_SIZE
			},
END
	done 								|
	sed '$ s/},/}/' >>$TMP_JSON	#  zap final comma in object list 

#  check errors in complex pipeline

STATUS=${PIPESTATUS[*]}
test "$STATUS" = '0 0 0 0 0 0 0' 					||
		die "blobio get tar | job json failed: exit status=$STATUS"

#  close json blob
cat <<END >>$TMP_JSON || die "cat job json close failed: exit status=$?"
		],
		"job_stop_time": "$(RFC3339Nano)"
	}
}
END
log '... done extract of tar elements into json blob'

JOB_BLOB=$BLOBIO_ALGORITHM:$(
	blobio eat --algorithm $BLOBIO_ALGORITHM --input-path $TMP_JSON
)
test $? = 0 || die "blobio eat job json failed: exit status=$?"
log "json job blob: $JOB_BLOB"
blobio put								\
	--input-path $TMP_JSON						\
	--udig $JOB_BLOB						\
	--service $BLOBIO_SERVICE					||
  die "blobio put job jsob failed: exit status=$?"

#  update transaction history
if [ -d data/ ];  then
	echo "$JOB_START_TIME	$JOB_BLOB" >>data/$PROG.jjob		||
		die "echo data/jjob failed: exit status=$?"
fi
