#/bin/bash
#
#  Synopsis:
#	Convert an extracted SEC EDGAR .nc file into jsob blob with elements.
#  Usage:
#	nc2submission <nc-tar-udig> <path/to/nc>
#	JOB_JSON=$(tail -1 $SECEDGAR_ROOT/data/nc2submission.jjob | cut -f2)
#  Exit Status:
#	0	json blob put
#	1	failure
#  Note:
#	Need a json validator and pretty printer in path $JMSCOTT_ROOT/bin.
#	Until then, use "python3 -m json.tool".
#

JOB_START_TIME=$(RFC3339Nano)
START_EPOCH=$(date +%s)
PROG=$(basename $0)
TMP_JSON=${TMPDIR:=/tmp}/$PROG.json.$$

now()
{
	date +'%Y/%m/%d %H:%M:%S'
}

log()
{
	echo "$(now): $PROG#$$: $@"
}

WARN()
{
	#  Note: do not write to stderr, since job blob written their
	log "WARN: $@"
}

fault()
{
	MSG="ERROR: $@"
	log "$MSG" >&2
	RUN=$SECEDGAR_ROOT/run
	test -w $RUN || return
	echo "$(now): $MSG" >>$RUN/$PROG.fault				||
		log "ERROR: echo fault failed: exit status=$?" >&2
}

leave()
{
	rm -f $TMP_JSON || fault "rm tmp json failed: exit status=$?" >&2
	DURATION=$(duration-english $(expr $(date +%s) - $START_EPOCH))
	log "elapsed duration: $DURATION"
	log 'good bye, cruel world'
	exit
}

die()
{
	fault "$@"
	exit 1
}

test $# = 2 || die 'wrong number of arguments'
TAR_BLOB=$1
NC_PATH=$2

log 'hello, world'
trap leave EXIT

log "SECEDGAR_ROOT=$SECEDGAR_ROOT"
log "BLOBIO_SERVICE=$BLOBIO_SERVICE"
log "BLOBIO_ALGORITHM=$BLOBIO_ALGORITHM"

log "tar blob: $TAR_BLOB"
log "nc file path: $NC_PATH"
test -r "$NC_PATH" || die "can not read nc file: exit status=$?"

#  where to record the transaction.
if [ -w $SECEDGAR_ROOT/data ];  then
	JJOB_PATH=$SECEDGAR_ROOT/data/$PROG.jjob
else
	die "no write jjob data dir: $SECEDGAR_ROOT/data"
fi

cat >$TMP_JSON <<END || die "cat >tmp_json failed: exit status=$?"
{
	"secedgar.play.jmscott.github.com": {
		"hostname": "$(hostname -f)",
		"process_id": $$,
		"job_start_time": "$JOB_START_TIME",
		"environment": {
			"PATH": "$(echo $PATH | escape-json-string)",
			"TMPDIR": "$TMPDIR",
			"LD_LIBRARY_PATH":
				"$(echo $LD_LIBRARY_PATH|escape-json-string)",
			"SECEDGAR_ROOT": "$SECEDGAR_ROOT",
			"BLOBIO_SERVICE": "$BLOBIO_SERVICE",
			"BLOBIO_GET_SERVICE": "$BLOBIO_GET_SERVICE",
			"BLOBIO_ALGORITHM": "$BLOBIO_ALGORITHM"
		},
		"command_line": {
			"command": "$PROG",
			"nc_tar_blob": "$TAR_BLOB",
			"nc_file_path": "$(echo $NC_PATH | escape-json-string)"
		},
		"jjob_path": "$JJOB_PATH",
		"submission_header": 
END
test $? = 0 || die "cat >json-header failed: exit status=$?" 

nc-submission2json <$NC_PATH						|
	python3 -m json.tool						|
	sed 's/^/\t\t/'							\
	>>$TMP_JSON
STATUS=${PIPESTATUS[*]}
test "$STATUS" = '0 0 0' ||
	die "nc-submission2json | json-pp failed: exit status=$STATUS"
cat >>$TMP_JSON <<END || die "cat >>json-footer failed: exit status=$?"
		,"job_stop_time": "$(RFC3339Nano)"
	}
}
END

JSON_BLOB=$BLOBIO_ALGORITHM:$(
	blobio eat --algorithm $BLOBIO_ALGORITHM --input-path $TMP_JSON
)
log "putting json blob: $JSON_BLOB"

blobio put								\
	--input-path $TMP_JSON						\
	--udig $JSON_BLOB						\
	--service $BLOBIO_SERVICE					||
	die "blobio put json failed: exit status=$?"
#
#  record the json job blob in dir data/ AND echo blob udig to stderr,
#  so caller process can record blob in its job blob.
#
JJOB="$(RFC3339Nano)    $JSON_BLOB"
echo "$JJOB" >>$JJOB_PATH || die "echo data/$PROG.jjob failed: exit status=$?"

#  write jjob blob to stderr, for retrience by caller
echo "$JSON_BLOB" >&2
exit 0
